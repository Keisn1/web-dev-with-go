:PROPERTIES:
:header-args:sql: :engine postgresql :dbuser baloo :dbpassword junglebook :database lenslocked :dbport 4321 :dbhost localhost
:END:
#+title: Postgres Queries

* List db users
#+begin_src sql
\du
#+end_src

#+RESULTS:
| List of roles |                                                            |
|---------------+------------------------------------------------------------|
| Role name     | Attributes                                                 |
| baloo         | Superuser, Create role, Create DB, Replication, Bypass RLS |

* List dbs
#+begin_src sql
\l
#+end_src

#+RESULTS:
| List of databases |       |          |                 |            |            |            |           |                   |
|-------------------+-------+----------+-----------------+------------+------------+------------+-----------+-------------------|
| Name              | Owner | Encoding | Locale Provider | Collate    | Ctype      | ICU Locale | ICU Rules | Access privileges |
| lenslocked        | baloo | UTF8     | libc            | en_US.utf8 | en_US.utf8 |            |           |                   |
| postgres          | baloo | UTF8     | libc            | en_US.utf8 | en_US.utf8 |            |           |                   |
| template0         | baloo | UTF8     | libc            | en_US.utf8 | en_US.utf8 |            |           | =c/baloo          |
| baloo=CTc/baloo   |       |          |                 |            |            |            |           |                   |
| template1         | baloo | UTF8     | libc            | en_US.utf8 | en_US.utf8 |            |           | =c/baloo          |
| baloo=CTc/baloo   |       |          |                 |            |            |            |           |                   |

* List tables
#+begin_src sql
\dt
#+end_src

#+RESULTS:
| List of relations |                  |       |       |
|-------------------+------------------+-------+-------|
| Schema            | Name             | Type  | Owner |
| public            | goose_db_version | table | baloo |
| public            | sessions         | table | baloo |
| public            | users            | table | baloo |

* Users table
** Create User table
#+begin_src sql
CREATE TABLE IF NOT EXISTS users (
  id SERIAL PRIMARY KEY,
  email TEXT UNIQUE NOT NULL,
  password_hash TEXT NOT NULL
);
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|

** Show columns User table
#+begin_src sql
\d users
#+end_src

#+RESULTS:
| Table "public.users"                               |         |           |          |                                   |
|----------------------------------------------------+---------+-----------+----------+-----------------------------------|
| Column                                             | Type    | Collation | Nullable | Default                           |
| id                                                 | integer |           | not null | nextval('users_id_seq'::regclass) |
| email                                              | text    |           | not null |                                   |
| password_hash                                      | text    |           | not null |                                   |
| Indexes:                                           |         |           |          |                                   |
| "users_pkey" PRIMARY KEY, btree (id)               |         |           |          |                                   |
| "users_email_key" UNIQUE CONSTRAINT, btree (email) |         |           |          |                                   |

** Insert into User Table
*** Insert User without Return value
#+begin_src sql
INSERT INTO users  (email, password_hash) VALUES
       ('kay@fe.com', '123abcHashuasf8o8y2kj');
#+end_src
*** Insert with Return value
#+begin_src sql
INSERT INTO users  (name, email) VALUES
       ('Susi', 'susi@email.com')
       RETURNING id;
#+end_src

#+RESULTS:
| id         |
|------------|
| 2          |
| INSERT 0 1 |

** Select users
*** all users
#+begin_src sql
SELECT * FROM users;
#+end_src
#+RESULTS:
| id | email     | password_hash                                                |
|----+-----------+--------------------------------------------------------------|
|  1 | kay@email | $2a$10$xpE8Wv4.qGv59.WuyTZmp.rvg95ahfYqQsuINrWCFfasb.kdbrsXG |
*** by email
#+begin_src sql
SELECT * FROM users WHERE email='john@calhoun.io.com';
#+end_src

#+RESULTS:
| id | age | first_name | last_name | email               |
|----+-----+------------+-----------+---------------------|
|  2 |  30 | John       | Calhoun   | john@calhoun.io.com |
*** by id
#+begin_src sql
SELECT * FROM users WHERE id=12;
#+end_src
*** all users with a session
#+begin_src sql
SELECT * FROM users
  JOIN sessions ON users.id = sessions.user_id;
#+end_src

#+RESULTS:
| id | email | password_hash | id | user_id | token_hash |
|----+-------+---------------+----+---------+------------|
*** users by sessions.token_hash
#+begin_src sql
SELECT users.id, users.email, users.password_hash
FROM sessions
  JOIN users ON users.id = sessions.user_id
WHERE sessions.token_hash="abasdf";,
#+end_src

** Update users
#+begin_src sql
UPDATE users
    SET first_name = 'Kaychen', last_name='FFFreyer'
    WHERE id = 3;
#+end_src

#+RESULTS:
| UPDATE 1 |
|----------|

** Delete data users
*** all users
#+begin_src sql
DELETE FROM users;
#+end_src

#+RESULTS:
| DELETE 1 |
|----------|

*** by id
#+begin_src sql
DELETE FROM users
WHERE id = 1;
#+end_src

#+RESULTS:
| DELETE 1 |
|----------|

** Drop users table
#+begin_src sql
DROP TABLE IF EXISTS users;
#+end_src

#+RESULTS:
| DROP TABLE |
|------------|
* Sessions table
** Create session table
#+begin_src sql
CREATE TABLE IF NOT EXISTS sessions (
  id SERIAL PRIMARY KEY,
  user_id INT UNIQUE REFERENCES users (id) ON DELETE CASCADE,
  token_hash TEXT UNIQUE NOT NULL
);
#+end_src

#+RESULTS:
| CREATE TABLE |
|--------------|
** Select sessions
*** all sessions
#+begin_src sql
SELECT * FROM sessions;
#+end_src

#+RESULTS:
| id | user_id | token_hash                                   |
|----+---------+----------------------------------------------|
|  1 |       1 | MzV1YrxCP3giLGBHaygDQjSn_nJnV-c9B5g7f2q0MBI= |

*** by userID
#+begin_src sql
SELECT user_id
FROM sessions
WHERE token_hash='asdf';
#+end_src
** Insert session
*** one sessions
#+begin_src sql
INSERT INTO sessions (user_id, token_hash) VALUES (1, 'xyz-123') RETURNING id;
#+end_src

#+RESULTS:
|---|

*** Insert or update
#+begin_src sql
INSERT INTO sessions (user_id, token_hash)
VALUES (1, 'xyz-456') ON conflict (user_id) DO
UPDATE
SET token_hash = 'xyz-456'
#+end_src
#+begin_src sql
INSERT INTO sessions (user_id, token_hash)
VALUES (1, '$2a$10$Z1LM30ZqmEkvj3Cxxr7s9esH9zbMlKsw1PzQZRmT.ONbmT.V/xB62') ON conflict (user_id) DO
UPDATE
SET token_hash = '$2a$10$Z1LM30ZqmEkvj3Cxxr7s9esH9zbMlKsw1PzQZRmT.ONbmT.V/xB62';
#+end_src

#+RESULTS:
| INSERT 0 1 |
|------------|

** Update session
#+begin_src sql
UPDATE sessions SET token_hash='111' WHERE user_id=1 RETURNING id;
#+end_src
** Delete session
#+begin_src sql
DELETE FROM sessions WHERE token_hash = $1;
#+end_src

** Drop sessions table
#+begin_src sql
DROP TABLE IF EXISTS sessions;
#+end_src

#+RESULTS:
| DROP TABLE |
|------------|
* Orders table
** Create Orders table
#+begin_src sql
CREATE TABLE IF NOT EXISTS orders (
  id SERIAL PRIMARY KEY,
  user_id INT NOT NULL,
  amount INT,
  description TEXT);
#+end_src
** Select Orders
*** all
#+begin_src sql
SELECT * FROM orders;
#+end_src

#+RESULTS:
| id | user_id | amount | description   |
|----+---------+--------+---------------|
|  1 |       4 |    100 | Fake order @1 |
|  2 |       4 |    200 | Fake order @2 |
|  3 |       4 |    300 | Fake order @3 |
|  4 |       4 |    400 | Fake order @4 |
|  5 |       4 |    500 | Fake order @5 |
*** by userId
#+begin_src sql
SELECT id, amount, description
FROM orders
WHERE user_id=4;
#+end_src
* Indexes
** on sessions.token_hash
#+begin_src sql
CREATE INDEX sessions_token_hash_idx ON session(token_hash);
#+end_src
